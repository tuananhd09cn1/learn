<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.big.test</groupId>
	<artifactId>e2e</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>e2e</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.47.1</version>
		</dependency>
		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>1.0.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>1.0.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
----
package com.big.test.e2e;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import cucumber.annotation.en.Given;
import cucumber.annotation.en.Then;
import cucumber.annotation.en.When;

public class CucumberJava { 
	   WebDriver driver = null; 
		
	   @Given("^I have open the browser$") 
	   public void openBrowser() { 
	      driver = new FirefoxDriver(); 
	   } 
		
	   @When("^I open Google website$") 
	   public void goToFacebook() { 
	      driver.navigate().to("https://www.google.com/"); 
	   } 
		
	   @Then("^Login button should exits$") 
	   public void loginButton() { 
	      if(driver.findElement(By.id("u_0_v")).isEnabled()) { 
	         System.out.println("Test 1 Pass"); 
	      } else { 
	         System.out.println("Test 1 Fail"); 
	      } 
	      driver.close(); 
	   } 
	}
  ---
  package com.big.test.e2e;
import java.net.URL;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import static java.lang.String.format;
public class DriverConfig {

    // Change these for your values.
    private static String proxyHost = "";
    private static int proxyPort = 0;
    private static String ignoreProxy = "localhost, 127.0.0.1";
    private static String seleniumGridHubHost = "localhost";

    /**
     * Firefox preference value for specifying Manual Proxy configuration.
     * 0 - Direct connection (or) no proxy. 
	 * 1 - Manual proxy configuration
	 * 2 - Proxy auto-configuration (PAC).
	 * 4 - Auto-detect proxy settings.
	 * 5 - Use system proxy settings.
     */
    private static final int MANUAL_PROXY_CONFIG = 1;

    public static WebDriver localFirefox() {

        FirefoxProfile profile = createProfile();

        return new FirefoxDriver(profile);
    }

    private static FirefoxProfile createProfile() {
        FirefoxProfile profile = new FirefoxProfile();

        // Use native events on all platforms
        profile.setEnableNativeEvents(true);

        boolean useProxy = !proxyHost.isEmpty();

        if (useProxy) {
            // Configures the same proxy for all variants
            profile.setPreference("network.proxy.type", MANUAL_PROXY_CONFIG);
            profile.setPreference("network.proxy.http", proxyHost);
            profile.setPreference("network.proxy.http_port", proxyPort);
            profile.setPreference("network.proxy.ssl", proxyHost);
            profile.setPreference("network.proxy.ssl_port", proxyPort);
            profile.setPreference("network.proxy.socks", proxyHost);
            profile.setPreference("network.proxy.socks_port", proxyPort);
            profile.setPreference("network.proxy.ftp", proxyHost);
            profile.setPreference("network.proxy.ftp_port", proxyPort);
            profile.setPreference("network.proxy.no_proxies_on", ignoreProxy);
        }
        return profile;
    }

    public static WebDriver remoteFirefox() throws Exception {
        DesiredCapabilities capabilities = DesiredCapabilities.firefox();

        capabilities.setCapability(FirefoxDriver.PROFILE, createProfile());

        URL remoteAddress = new URL(format("http://%s:4444/wd/hub/", seleniumGridHubHost));
        // Remote Driver, e.g. on a VM
        RemoteWebDriver driver = new RemoteWebDriver(remoteAddress, capabilities);

        return driver;
    }
}
--
package com.big.test.e2e;

import org.junit.runner.RunWith;

import cucumber.junit.Cucumber; 

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Selenium2Example  {
    public static void main(String[] args) {
        // Create a new instance of the Firefox driver
        // Notice that the remainder of the code relies on the interface, 
        // not the implementation.
        WebDriver driver = new FirefoxDriver();

        // And now use this to visit Google
        driver.get("http://www.google.com");
        // Alternatively the same thing can be done like this
        // driver.navigate().to("http://www.google.com");

        // Find the text input element by its name
        WebElement element = driver.findElement(By.name("q"));

        // Enter something to search for
        element.sendKeys("Cheese!");

        // Now submit the form. WebDriver will find the form for us from the element
        element.submit();

        // Check the title of the page
        System.out.println("Page title is: " + driver.getTitle());
        
        // Google's search is rendered dynamically with JavaScript.
        // Wait for the page to load, timeout after 10 seconds
        (new WebDriverWait(driver, 10)).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!");
            }
        });

        // Should see: "cheese! - Google Search"
        System.out.println("Page title is: " + driver.getTitle());
        
        //Close the browser
        driver.quit();
    }
    
}

